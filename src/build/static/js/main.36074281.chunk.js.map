{"version":3,"sources":["components/container/slider/Slider.js","components/container/checkbox/CheckBox.js","utils/Helper.js","components/container/Container.js","components/container/tooltip/Tooltip.js","components/display/Display.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Slider","props","step","min","max","value","defaultLength","onChangeValue","rangeRef","useRef","useState","range","setRange","progressValue","progress","styleInput","background","className","ref","type","onChange","e","target","newBackgroundStyle","current","style","handleChange","readOnly","class","CheckBox","label","checked","name","disabled","opacity","characters","passwordLength","setPasswordLength","length","generatePassword","passwordProps","pwdLength","uppercase","lowercase","symbols","numbers","characterList","password","i","Math","floor","random","passwordCharacters","copyToClipBoard","elementRef","select","document","execCommand","CHECKBOX_LIST","id","isChecked","Container","setPassword","setPasswordProps","passwordRef","rangeValue","setRangeValue","checkbox","setCheckBox","setChecked","checkedName","setCheckedName","minMaxValue","setMinMaxValue","useEffect","passwordGenerated","checkBoxCount","checkedCount","Object","keys","filter","key","checkBoxProperties","checkBoxProps","prevState","useMemo","map","checkboxProps","pwd","onChangeCheckBox","parseInt","handleClick","preventDefault","Tooltip","message","position","displayTooltip","Display","tooltip","setTooltip","pwdDescription","backgroundColor","setBackgroundColor","onClick","setTimeout","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36074281.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Slider.css\";\n\nconst Slider = (props) => {\n  const { step, min, max, value, defaultLength, onChangeValue } = props;\n\n  const rangeRef = useRef();\n  let [range, setRange] = useState();\n\n  const activeRangeColor = \"#4aa1f3\";\n  const rangeBackground = \"#d7dcdf\";\n\n  const handleChange = (max) => (e) => {\n    onChangeValue(e);\n    const value = e.target.value;\n    setRange(value);\n    const progress = (value / max) * 100 + \"%\";\n    const newBackgroundStyle = `linear-gradient(90deg, ${activeRangeColor} 0% ${progress}, ${rangeBackground} ${progress} 100%)`;\n    rangeRef.current.style.background = newBackgroundStyle;\n  };\n\n  if (range !== defaultLength || !range) {\n    range = defaultLength;\n  }\n\n  const progressValue = range;\n  const progress = (progressValue / max) * 100 + \"%\";\n  const styleInput = {\n    background: `linear-gradient(90deg, ${activeRangeColor} 0% ${progress}, ${rangeBackground} ${progress} 100%)`,\n  };\n\n  return (\n    <div className=\"slider-container\">\n      <div className=\"slider\">\n        <input\n          ref={rangeRef}\n          className=\"range-slider\"\n          type=\"range\"\n          step={step}\n          min={min}\n          max={max}\n          value={value}\n          onChange={handleChange(max)}\n          style={styleInput}\n        />\n        <input\n          type=\"text\"\n          readOnly\n          class=\"bg-gray-100 text-center rounded text-sm w-16 ml-3 p-1 px-2 mr-4 border focus:outline-none focus:border-blue-500\"\n          value={progressValue}\n        />\n      </div>\n    </div>\n  );\n};\n\nSlider.propTypes = {\n  step: PropTypes.number.isRequired,\n  min: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired,\n  defaultLength: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired,\n  onChangeValue: PropTypes.func.isRequired,\n};\n\nexport default Slider;\n","import React from 'react'\nimport PropTypes from 'prop-types';\n\nimport './CheckBox.css';\n\nconst CheckBox = props => {\n    const { label, value, checked, name, onChange, disabled } = props;\n\n    return (\n        <>\n            <div className=\"col-md-3\">\n                <label className=\"container\">\n                    <h1>{label}</h1>\n                    <input \n                        type=\"checkbox\"\n                        name={name}\n                        checked={checked}\n                        value={value}\n                        onChange={onChange}\n                        disabled={disabled}\n                        className=\"checkbox-input\"\n                    />\n                    <span className=\"checkmark\"\n                        style={{ opacity: disabled ? '0.7' : '' }}\n                    ></span>\n                </label>\n            </div>\n        </>\n    )\n}\n\nCheckBox.propTypes = {\n    label: PropTypes.string.isRequired,\n    value: PropTypes.bool.isRequired,\n    checked: PropTypes.bool.isRequired,\n    name: PropTypes.string.isRequired,\n    disabled: PropTypes.bool.isRequired,\n    onChange: PropTypes.func.isRequired,\n}\n\nexport default CheckBox\n","let characters = '';\nlet passwordLength = 0;\n\nconst setUpperCase = isUpperCase => {\n    if (isUpperCase) {\n        characters += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    }\n    return '';\n}\n\nconst setLowerCase = isLowerCase => {\n    if (isLowerCase) {\n        characters += 'abcdefghijklmnopqrstuvwxyz';\n    }\n    return '';\n}\n\nconst setSymbols = isSymbol => {\n    if (isSymbol) {\n        characters += '!@#$%^&*()<>,.?/[]{}-=_+|/';\n    }\n    return '';\n}\n\nconst setNumber = isNumeric => {\n    if (isNumeric) {\n        characters += '0123456789';\n    }\n    return '';\n}\n\nconst getRandomInteger = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst passwordCharacters = () => {\n    const characterList = characters;\n    let password = '';\n    if (characterList.length > 0) {\n        for (let i = 0; i < passwordLength; i++) {\n            password += characterList[getRandomInteger(0, characterList.length - 1)];\n        }\n        characters = '';\n        passwordLength = 0;\n\n        return password;\n    }\n}\n\nexport const setPasswordLength = length => {\n    passwordLength = length;\n    return passwordLength;\n}\n\nexport const generatePasswordLength = () => {\n    return passwordLength;\n}\n\nexport const generatePassword = (passwordProps, pwdLength) => {\n    const { uppercase, lowercase, symbols, numbers } = passwordProps;\n\n    setPasswordLength(pwdLength);\n    setUpperCase(uppercase);\n    setLowerCase(lowercase);\n    setSymbols(symbols);\n    setNumber(numbers);\n\n    const password = passwordCharacters();\n    return password;\n}\n\nexport const copyToClipBoard = elementRef => {\n    elementRef.select();\n    document.execCommand('copy');\n}","import React, { useState, useEffect, useMemo } from \"react\";\n\nimport \"./Container.css\";\nimport Button from \"./button/Button\";\nimport Slider from \"./slider/Slider\";\nimport CheckBox from \"./checkbox/CheckBox\";\nimport {\n  generatePassword,\n  setPasswordLength,\n  copyToClipBoard,\n} from \"../../utils/Helper\";\n\nconst CHECKBOX_LIST = [\n  {\n    id: 0,\n    name: \"uppercase\",\n    label: \"Uppercase\",\n    isChecked: true,\n  },\n  {\n    id: 1,\n    name: \"lowercase\",\n    label: \"Lowercase\",\n    isChecked: true,\n  },\n  {\n    id: 2,\n    name: \"symbols\",\n    label: \"Symbols\",\n    isChecked: true,\n  },\n  {\n    id: 3,\n    name: \"numbers\",\n    label: \"Numbers\",\n    isChecked: true,\n  },\n];\n\nconst Container = (props) => {\n  const { setPassword, setRange, setPasswordProps, passwordRef, type } = props;\n\n  const [rangeValue, setRangeValue] = useState(12);\n  const [checkbox, setCheckBox] = useState({\n    uppercase: true,\n    lowercase: true,\n    symbols: true,\n    numbers: true,\n  });\n  const [checked, setChecked] = useState(false);\n  const [checkedName, setCheckedName] = useState(\"\");\n  const [minMaxValue, setMinMaxValue] = useState({\n    min: 1,\n    max: 60,\n  });\n\n  const { uppercase, lowercase, symbols, numbers } = checkbox;\n  const { min, max } = minMaxValue;\n\n  useEffect(() => {\n    setPasswordLength(rangeValue);\n    setRange(rangeValue);\n    setRangeValue(rangeValue);\n    passwordGenerated(checkbox, rangeValue);\n\n    checkBoxCount();\n\n    // eslint-disable-next-line\n  }, [uppercase, lowercase, symbols, numbers]);\n\n  const checkBoxCount = () => {\n    const checkedCount = Object.keys(checkbox).filter((key) => checkbox[key]);\n    const disabled = checkedCount.length === 1;\n    const name = checkedCount[0];\n    if (disabled) {\n      setChecked(disabled);\n      setCheckedName(name);\n    } else {\n      setChecked(false);\n      setCheckedName(\"\");\n    }\n  };\n\n  const updateCheckBoxes = () => {\n    if (type === \"pin\") {\n      CHECKBOX_LIST.map((checkbox) => {\n        const name = checkbox.name;\n        if (name !== \"numbers\") {\n          checkbox.isChecked = false;\n          const checkboxProps = {\n            name,\n            checkedName: name,\n            checked: true,\n            isChecked: checkbox.isChecked,\n            min: 0,\n            max: 15,\n            length: 3,\n          };\n          checkBoxProperties(checkboxProps);\n        }\n        return \"\";\n      });\n    } else {\n      CHECKBOX_LIST.map((checkbox) => {\n        const name = checkbox.name;\n        checkbox.isChecked = true;\n        const checkboxProps = {\n          name,\n          checkedName: \"\",\n          checked: false,\n          isChecked: checkbox.isChecked,\n          min: 1,\n          max: 60,\n          length: 12,\n        };\n        checkBoxProperties(checkboxProps);\n        return \"\";\n      });\n    }\n  };\n\n  const checkBoxProperties = (checkBoxProps) => {\n    const { name, checked, isChecked, checkedName, min, max, length } =\n      checkBoxProps;\n\n    setCheckBox((prevState) => ({ ...prevState, [name]: isChecked }));\n    setChecked(checked);\n    setCheckedName(checkedName);\n    setPasswordLength(length);\n    setMinMaxValue({ min, max });\n    setRangeValue(length);\n    setRange(length);\n  };\n\n  useMemo(updateCheckBoxes, [type]);\n\n  const passwordGenerated = (checkbox, rangeValue) => {\n    const pwd =\n      rangeValue > 3\n        ? generatePassword(checkbox, rangeValue)\n        : generatePassword(checkbox, 3);\n    setPassword(pwd);\n    setPasswordProps(checkbox);\n  };\n\n  const onChangeSlider = (e) => {\n    setPasswordLength(e.target.value);\n    setRangeValue(e.target.value);\n    setRange(e.target.value);\n    passwordGenerated(checkbox, e.target.value);\n  };\n\n  const onChangeCheckBox = (e) => {\n    if (type !== \"pin\") {\n      let { name, checked } = e.target;\n      CHECKBOX_LIST.map((checkbox) => {\n        if (checkbox.name === name) {\n          checkbox.isChecked = checked;\n          setCheckBox((prevState) => ({\n            ...prevState,\n            [name]: checkbox.isChecked,\n          }));\n          setPasswordLength(rangeValue);\n          setRangeValue(rangeValue);\n        }\n\n        return \"\";\n      });\n    }\n  };\n\n  const copyClipBoard = (elementRef) => (e) => {\n    e.preventDefault();\n    copyToClipBoard(elementRef);\n  };\n\n  return (\n    <>\n      <div className=\"relative block p-8 overflow-hidden border border-slate-100 rounded-lg ml-6 mr-6 mt-4\">\n        <span className=\"absolute inset-x-0 bottom-0 h-2 bg-gradient-to-r from-green-300 via-blue-500 to-purple-600\"></span>\n\n        <div className=\"justify-between\">\n          <h1 className=\"password-display-input text-xl font-bold text-black\">\n            Use the slider, and select from the options.\n          </h1>\n          <Slider\n            min={parseInt(min, 10)}\n            max={parseInt(max, 10)}\n            step={1}\n            defaultLength={parseInt(rangeValue, 10)}\n            value={parseInt(rangeValue, 10)}\n            onChangeValue={onChangeSlider}\n          />\n\n          <div className=\"row checkbox-container\">\n            {CHECKBOX_LIST.map((checkbox) => (\n              <CheckBox\n                key={checkbox.id}\n                name={checkbox.name}\n                checked={checkbox.isChecked}\n                label={checkbox.label}\n                value={checkbox.isChecked}\n                onChange={onChangeCheckBox}\n                disabled={\n                  checked && checkbox.isChecked && checkedName === checkbox.name\n                }\n              />\n            ))}\n          </div>\n          <div className=\"text-center mt-4\">\n          <button\n            className=\"btn password-btn\"\n            label=\"Save Password\"\n            handleClick={copyClipBoard(passwordRef.current)}\n          >Save Password</button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport { Container };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Tooltip.css';\n\nconst Tooltip = props => {\n    const { message, position, displayTooltip } = props;\n\n    return (\n        <>\n            {\n                displayTooltip ?\n                <div className={`tooltip-bubble tooltip-${position}`}>\n                    <div className=\"tooltip-message\">{message}</div>\n                </div> : ''\n            }\n        </>\n    )\n}\n\nTooltip.propTypes = {\n    message: PropTypes.string.isRequired,\n    position: PropTypes.string.isRequired,\n    displayTooltip: PropTypes.bool.isRequired,\n}\n\nexport default Tooltip;\n","import React, { useState, useRef } from \"react\";\n\nimport \"./Display.css\";\nimport { Container } from \"../container/Container\";\nimport Button from \"../container/button/Button\";\nimport Tooltip from \"../container/tooltip/Tooltip\";\nimport { generatePassword, copyToClipBoard } from \"../../utils/Helper\";\n\nconst Display = () => {\n  const [password, setPassword] = useState(\"\");\n  const [rangeValue, setRange] = useState();\n  const [passwordProps, setPasswordProps] = useState();\n  const [tooltip, setTooltip] = useState(false);\n  const [type, setType] = useState(\"password\");\n  const passwordRef = useRef(null);\n  let pwdDescription = \"\";\n\n  const generateNewPassword = () => {\n    const pwd =\n      rangeValue > 3\n        ? generatePassword(passwordProps, rangeValue)\n        : generatePassword(passwordProps, 3);\n    setPassword(pwd);\n  };\n\n  const copyClipBoard = (e) => {\n    e.preventDefault();\n    copyToClipBoard(passwordRef.current);\n    setTooltip(true);\n    setTimeout(() => {\n      setTooltip(false);\n    }, 2000);\n  };\n\n  const onSelectTag = (e) => {\n    setType(e.target.value);\n  };\n\n  const setBackgroundColor = (password) => {\n    if (password && password.length === 1 && password.length <= 5) {\n      pwdDescription = \"Bad password\";\n      return \"#cb473e\";\n    } else if (password && password.length >= 6 && password.length <= 10) {\n      pwdDescription = \"Weak password\";\n      return \"#f07d58\";\n    } else if (password && password.length > 10) {\n      pwdDescription = \"Strong password\";\n      return \"#55a95d\";\n    } else {\n      pwdDescription = \"Bad password\";\n      return \"#cb473e\";\n    }\n  };\n\n  return (\n    <>\n      <div\n        className=\"relative bg-green-500 block p-8 overflow-hidden border border-slate-100 rounded-lg ml-6 mr-6\"\n        style={{ backgroundColor: setBackgroundColor(password) }}\n      >\n        <div className=\"justify-between sm:flex\">\n          <div>\n            <input\n              ref={passwordRef}\n              type=\"text\"\n              value={password}\n              className=\"password-display-input text-xl font-bold text-white\"\n              readOnly\n            />\n            <p className=\"mt-2 text-xs font-medium text-white\">\n              {password && password.length > 10 ? (\n                <>\n                  <i className=\"fas fa-check-circle\"></i> {pwdDescription}\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-exclamation-circle\"></i> {pwdDescription}\n                </>\n              )}\n            </p>\n          </div>\n\n          <div className=\"flex-shrink-0 hidden ml-3 sm:block\">\n            <div className=\"password-display-icons\">\n              <button onClick={copyClipBoard} className=\"copy-btn\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className=\"h-6 w-6\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                  strokeWidth={2}\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\"\n                  />\n                </svg>\n              </button>\n              <button\n                onClick={generateNewPassword}\n                className=\"generate-btn ml-6\"\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className=\"h-6 w-6\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                  strokeWidth={2}\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n                  />\n                </svg>\n              </button>\n\n              <Tooltip\n                message=\"Copied\"\n                position=\"left\"\n                displayTooltip={tooltip}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Container\n        type={type}\n        setPassword={setPassword}\n        setRange={setRange}\n        setPasswordProps={setPasswordProps}\n        passwordRef={passwordRef}\n      />\n    </>\n  );\n};\n\nconst selectTagStyle = {\n  backgroundColor: \"inherit\",\n  color: \"#506175\",\n  width: \"20%\",\n  height: \"auto\",\n  marginLeft: \"-4px\",\n};\n\nexport default Display;\n","import React from 'react';\nimport Display from './display/Display';\n\nconst Main = () => {\n    return (\n        <>\n            <Display />\n        </>\n    )\n}\n\nexport default Main;","import React from 'react';\n\nimport './App.css';\nimport Main from './components/Main';\n\nconst App = () => {\n  return (\n    <div className=\"container mt-4\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}